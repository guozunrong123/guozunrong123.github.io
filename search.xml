<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Chapter 4 操作臂逆运动学</title>
      <link href="/2023/01/29/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter4%20%E6%93%8D%E4%BD%9C%E8%87%82%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/"/>
      <url>/2023/01/29/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter4%20%E6%93%8D%E4%BD%9C%E8%87%82%E9%80%86%E8%BF%90%E5%8A%A8%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Chapter4-操作臂逆运动学"><a href="#Chapter4-操作臂逆运动学" class="headerlink" title="Chapter4 操作臂逆运动学"></a>Chapter4 操作臂逆运动学</h1><h2 id="解的存在性"><a href="#解的存在性" class="headerlink" title="解的存在性"></a>解的存在性</h2><h3 id="操作臂的工作空间"><a href="#操作臂的工作空间" class="headerlink" title="操作臂的工作空间"></a>操作臂的工作空间</h3><p>简单地说，工作空间是操作臂末端执行器所能到达的范围。若要求解存在，则被指定的目标点必须在工作空间内。</p><p><strong>灵巧工作空间</strong>：机器人的末端执行器能够从各个方向到达的空间区域。</p><p><strong>可达工作空间</strong>：机器人至少从一个方向上可以到达的空间。</p><p>可见，灵巧工作空间是可达工作空间的子集。</p><h3 id="多解问题"><a href="#多解问题" class="headerlink" title="多解问题"></a>多解问题</h3><p>如图所示，到达同一个点可以有多种解。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128174656415.png"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>我们把操作臂的全部求解方法分为两大类：<strong>封闭解</strong>和<strong>数值解</strong>。</p><p>下面主要讨论封闭解方法。在本章中，“封闭形式”意指基于解析形式的解法，或者对于不高于4次的多项式不用迭代便可完全求解。</p><p>可将封闭解的求解方法分为两类：<strong>代数法</strong>和<strong>几何法</strong>。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128193455070.png"></p><h4 id="Pieper解法"><a href="#Pieper解法" class="headerlink" title="Pieper解法"></a>Pieper解法</h4><p>特殊解法</p><p><a href="https://zhuanlan.zhihu.com/p/106632144">机器人学——学习笔记11(Pieper’s Solution) - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学导论 </tag>
            
            <tag> 逆运动学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3 操作臂运动学</title>
      <link href="/2023/01/28/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter3%20%E6%93%8D%E4%BD%9C%E8%87%82%E8%BF%90%E5%8A%A8%E5%AD%A6/"/>
      <url>/2023/01/28/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter3%20%E6%93%8D%E4%BD%9C%E8%87%82%E8%BF%90%E5%8A%A8%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Chapter3-操作臂运动学"><a href="#Chapter3-操作臂运动学" class="headerlink" title="Chapter3 操作臂运动学"></a>Chapter3 操作臂运动学</h1><h2 id="连杆的描述"><a href="#连杆的描述" class="headerlink" title="连杆的描述"></a>连杆的描述</h2><p>操作臂可以看成由一系列通过关节连接成运动链的刚体。我们将这些刚体称为连杆。当两个刚体之间的相对运动是两个平面相互之间的相对滑动时，连接相邻两个刚体的运动副称为低副。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112172810077.png" alt="6种常见的低副关节"></p><p>为了确定末端执行器在三维空间的位置和姿态，操作臂至少需要6个关节。</p><p>三维空间中的任意两个轴之间的距离是固定的，即为两轴之间公垂线的长度。</p><p>如图，关节轴i-1和关节轴i之间公垂线的长度为a<del>i-1</del>，a<del>i-1</del>即为连杆长度。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230116220205755.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230116220623404.png"></p><h2 id="连杆连接的描述"><a href="#连杆连接的描述" class="headerlink" title="连杆连接的描述"></a>连杆连接的描述</h2><p>在研究机器人运动学时，仅需要考虑两个参数，这两个参数完全确定了所有连杆时如何连接的。</p><p>沿两个相邻连杆公共轴线方向的距离可以用一个参数描述，该参数称为连杆偏距，在关节轴i上的连杆偏距记为d<del>i</del> 。用另一个参数描述两相邻连杆绕公共轴线旋转的夹角，该参数称为关节角，记为Θ<del>i</del>。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230126114600090.png"></p><h2 id="连杆参数"><a href="#连杆参数" class="headerlink" title="连杆参数"></a>连杆参数</h2><p>因此，机器人的每个连杆都可以用4个运动学参数来描述，其中两个参数用于描述连杆本身，另两个参数用于描述连杆之间的连接关系。通常，对于转动关节，Θ<del>i</del>为关节变量，其他三个连杆参数是固定不变的；对于移动关节，d<del>i</del>为关节变量，其他三个连杆参数是固定不变的。这种用连杆参数描述机构运动关系的规则称为DH法。</p><h2 id="连杆坐标系的定义"><a href="#连杆坐标系的定义" class="headerlink" title="连杆坐标系的定义"></a>连杆坐标系的定义</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128144122352.png"></p><h3 id="连杆参数在连杆坐标系中的表示方法"><a href="#连杆参数在连杆坐标系中的表示方法" class="headerlink" title="连杆参数在连杆坐标系中的表示方法"></a>连杆参数在连杆坐标系中的表示方法</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128144235355.png"></p><h3 id="建立连杆坐标系的步骤"><a href="#建立连杆坐标系的步骤" class="headerlink" title="建立连杆坐标系的步骤"></a>建立连杆坐标系的步骤</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128150718420.png"></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128155509861.png"></p><h2 id="操作臂运动学"><a href="#操作臂运动学" class="headerlink" title="操作臂运动学"></a>操作臂运动学</h2><h3 id="连杆变换的推导"><a href="#连杆变换的推导" class="headerlink" title="连杆变换的推导"></a>连杆变换的推导</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230128165201317.png"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学导论 </tag>
            
            <tag> 正运动学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.1.25 note</title>
      <link href="/2023/01/25/Life/2023.1.25%E8%AE%B0/"/>
      <url>/2023/01/25/Life/2023.1.25%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="过年"><a href="#过年" class="headerlink" title="过年"></a>过年</h1><p>过年了过年了！</p><p>估摸有四五年没回家过年了。</p><p>今年终于back back。</p><h2 id="红包"><a href="#红包" class="headerlink" title="红包"></a>红包</h2><p>不知道从什么时候开始，我不喜欢收人家红包了。</p><p>可能是长大了吧，变得不好意思了。</p><h2 id="麻将"><a href="#麻将" class="headerlink" title="麻将"></a>麻将</h2><p>打了三回麻将，寄了三回。</p><p>我也不造啊，可能是我太菜了。</p><p>确实，没怎么打过。</p><p>手气也不怎么好。</p><h2 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h2><p>买了好多烟花，放了一个小时，累了。</p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230125144442885.png" alt="" style="zoom: 50%;" /><h2 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h2><p>吃了好多东西。</p><p>念念不忘的，还是一碗牛肉粿。</p><p>还有，烧烤。</p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230125145008883.png" alt="" style="zoom:50%;" /><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><p>今年没回家里住。住在公寓宾馆。</p><p>挺好的，回老家不用带很多东西，也不用收拾了。</p><p>晚上太晚回家，老人也不用担心。</p><h2 id="小孩"><a href="#小孩" class="headerlink" title="小孩"></a>小孩</h2><p>不知不觉，我们都已经长大了。</p><p>两个堂姐都已经结婚，也有了小孩。</p><p>很可爱的。</p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230125144722412.png" alt="" style="zoom:50%;" /><h2 id="走亲戚"><a href="#走亲戚" class="headerlink" title="走亲戚"></a>走亲戚</h2><p>今年见了上百个亲戚，认识了好多人。</p><p>逃不了的问题。</p><p>多大了，工作没，在哪里读书，有没有女朋友……</p><h2 id="家"><a href="#家" class="headerlink" title="家"></a>家</h2><p>随着长大，越来越爱自己的家。</p><p>我的父母是十分善良的，和蔼的。</p><p>待人做事一直是我的榜样。</p><p>他们以身作则，教会了我很多。</p><p>我要成为他们的骄傲。</p><blockquote><p>有老有小，有说有笑，</p><p>柴米油盐，有锅有灶，</p><p>家人团圆，和睦相处，</p><p>互敬互爱，幸福相伴。</p></blockquote><p>有空多陪伴家人！家人是永远的依靠。</p><p>铭记，铭记！</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.1.17 note</title>
      <link href="/2023/01/17/Life/2023.1.17%E8%AE%B0/"/>
      <url>/2023/01/17/Life/2023.1.17%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>太过摆烂了啊。</p><p>其他事情也有点多。</p><p>但还是自己太摆了，天天刷手机- -。</p><p>没有静下心来啊。睡的太晚了啊。</p><p>没有怎么更新最近。</p><p>明天改变！</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.1.15 note</title>
      <link href="/2023/01/15/Life/2023.1.15%E8%AE%B0/"/>
      <url>/2023/01/15/Life/2023.1.15%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>第一次上传到Life Category，随便说点东西。</p><p>建这个Blog，上传东西，very happy，找到了自己喜欢的东西。</p><p>我是不怎么喜欢在朋友圈、微博等等地方发东西的，no why啊，我有时候也很想发，但是还是没发。</p><p>没有微信小号啊，不能随便发疯，矜持！</p><p>这个就很满意啊，什么shit mountain都可以往上堆，反正没人看，独自happy。</p><p>我是想一天一更的，但是…我尽力吧。</p><p>以后多在这里分享生活，记录下来。</p><p>ok！文笔不佳，到此结束，下一环节。</p><h2 id="2023-1-15记"><a href="#2023-1-15记" class="headerlink" title="2023.1.15记"></a>2023.1.15记</h2><p>许久没发过圈了，今天发了一发，有后来认识的好朋友说第一次见我发圈，hhh。确实，上一条是去年6月RM的时候了。</p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230116002357193.png" style="zoom: 50%;" /><p>这两周回学校了，with 崔小boy。</p><p>有趣的是，宿舍没人大门锁了，哥们就带了两三套衣服啊，6。</p><p>嗯，宿舍就算开门还停电了，洗澡…洗个寂寞。</p><p>我还是聪明的，去旁边酒店开钟点房洗澡。没想到啊，第一次开钟点房竟是…</p><p>为了洗一个热水澡！ok。ok。</p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230116002416845.png" style="zoom:50%;" /><p><strong>至于睡吧</strong>，每天睡在实验室，还可以。</p><p>但是，<u>外面的猫别发情了</u>，<u>外面的保安别唱歌了</u>，<u>墙上的钟别有噪音了</u>。</p><p><strong>至于吃吧</strong>，陕西x馆、M记、欢乐x乔…nice！肥！</p><p><strong>至于为什么回去</strong>，因为热爱，干活！</p><p>后面Pace邀请Saturday去hw当个模特。ok！</p><p>直接下班，back home。</p><p>ok，直接进入Saturday！</p><p>非常开心的一天😄。</p><p>都是帅哥美女。都很nice。</p><p>虎外的感觉还是好啊，真的跟其他地方不一样。无论是人，抑或是其实。</p><p>天空还是好看，广州没有这么美的天空。忘记拍照了，下次一定…</p><p>自拍一张：</p><p><u><strong>photo</strong></u> 加载中…</p><p>想看？慢慢加载~！</p><p>就写这么多吧，词穷。</p><p>终。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freertos基础知识</title>
      <link href="/2023/01/13/Learn/%E6%9D%82/FreeRTOS/"/>
      <url>/2023/01/13/Learn/%E6%9D%82/FreeRTOS/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="Freertos基础知识"><a href="#Freertos基础知识" class="headerlink" title="Freertos基础知识"></a>Freertos基础知识</h2><h3 id="什么是Freertos？"><a href="#什么是Freertos？" class="headerlink" title="什么是Freertos？"></a>什么是Freertos？</h3><p>​Free 就是免费的、RTOS 全称是 Real Time Operating System，中文名就是实时操作系统。可以看出 FreeROTS 就是一个免费的 RTOS 类系统。</p><p>​操作系统允许多个任务同时运行，这个叫做多任务，实际上，一个处理器核心在某一时刻只能运行一个任务。操作系统中任务调度器的责任就是决定在某一时刻究竟运行哪个任务，任务调度在各个任务之间的切换非常快！这就给人们造成了同一时刻有多个任务同时运行的错觉。</p><p>​FreeRTOS 由用户给每个任务分配一个任务优先级，任务调度器就可以根据此优先级来决定下一刻应该运行哪个任务。</p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h4 id="什么是多任务系统？"><a href="#什么是多任务系统？" class="headerlink" title="什么是多任务系统？"></a>什么是多任务系统？</h4><p>​回想一下我们以前在使用 51、STM32 单片机裸机(未使用系统)的时候一般都是在 main 函数里面用 while(1)做一个大循环来完成所有的处理，即应用程序是一个无限的循环，循环中调用相应的函数完成所需的处理。有时候我们也需要中断中完成一些处理。相对于多任务系统而言，这个就是单任务系统，也称作前后台系统，中断服务函数作为前台程序，大循环 while(1)作为后台程序。如图所示。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003003311071.png"></p><p>​可以看到，前后台系统各个任务都是排队等着轮流执行，不管你这个程序现在有多紧急，没轮到你就只能等着！相当于所有任务的优先级都是一样的。</p><p>​FreeRTOS 是一个抢占式的实时多任务系统，那么其任务调度器也是抢占式的。如图所示。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003003616795.png"></p><h4 id="任务状态"><a href="#任务状态" class="headerlink" title="任务状态"></a>任务状态</h4><ol><li>运行态<br>当一个任务正在运行时，那么就说这个任务处于运行态，处于运行态的任务就是当前正在使用处理器的任务。如果使用的是单核处理器的话那么不管在任何时刻永远都只有一个任务处于运行态。</li><li>就绪态<br>处于就绪态的任务是那些已经准备就绪(这些任务没有被阻塞或者挂起)，可以运行的任务， 但是处于就绪态的任务还没有运行，因为有一个同优先级或者更高优先级的任务正在运行！</li><li>阻塞态<br>如果一个任务当前正在等待某个外部事件的话就说它处于阻塞态，比如说如果某个任务调 用了函数 vTaskDelay()的话就会进入阻塞态，直到延时周期完成。任务在等待队列、信号量、事 件组、通知或互斥信号量的时候也会进入阻塞态。任务进入阻塞态会有一个超时时间，当超过 这个超时时间任务就会退出阻塞态，即使所等待的事件还没有来临！</li><li>挂起态<br>像阻塞态一样，任务进入挂起态以后也不能被调度器调用进入运行态，但是进入挂起态的 任务没有超时时间。任务进入和退出挂起态通过调用函数 vTaskSuspend()和 xTaskResume()。</li></ol><h4 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h4><p>​每个任务都可以分配一个从 0~(configMAX_PRIORITIES-1) 的优先级，宏 configMAX_PRIORITIES 不能超过 32！优先级数字越低表示任务的优先级越低，0 的优先级最低，configMAX_PRIORITIES-1 的优先级最高。空闲任务的优先级最低，为 0。 FreeRTOS 调度器确保处于就绪态或运行态的高优先级的任务获取处理器使用权，换句话说就是处于就绪态的最高优先级的任务才会运行。</p><p>​当宏 configUSE_TIME_SLICING 定义为 1 的时候多个任务可以共用一个优先级，数量不限。此时处于就绪态的优先级相同的任务就会使用时间片轮转调度器获取运行时间，一个时间片的长度就是滴答定时器的中断周期，由宏configTICK_RATE_HZ确定。</p><h4 id="任务堆栈"><a href="#任务堆栈" class="headerlink" title="任务堆栈"></a>任务堆栈</h4><p>​FreeRTOS 之所以能正确的恢复一个任务的运行就是因为有任务堆栈在保驾护航，任务调度器在进行任务切换的时候会将当前任务的现场(CPU 寄存器值等)保存在此任务的任务堆栈中， 等到此任务下次运行的时候就会先用堆栈中保存的值来恢复现场，恢复现场以后任务就会接着从上次中断的地方开始运行。</p><p>​基于RTOS的应用中，每个任务都拥有自己的<a href="https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&spm=1001.2101.3001.7020">堆栈</a>空间。堆栈设置过大，会造成内存资源浪费；设置过小，可能导致运行过程中的任务栈溢出，从而导致一些奇怪的系统行为。</p><p>​一般来说，任务堆栈可以从一个比较大的堆栈空间开始，如需进而开发出更高质量的代码：在运行时监视堆栈空间的使用情况，以查看应用程序运行一段时间后实际使用了多少堆栈空间。基于可视化分析，用户可以更清晰直观的掌握系统中内存的使用情况。</p><p><a href="https://strongerhuang.blog.csdn.net/article/details/125108922?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125108922-blog-103144501.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125108922-blog-103144501.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2">(46条消息) 如何设置RTOS任务的堆栈大小？_strongerHuang的博客-CSDN博客</a></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>​看个定义：<a href="https://zhuanlan.zhihu.com/p/81018602">算法一看就懂之「 队列 」 - 知乎 (zhihu.com)</a></p><p>​队列在这里是为了任务与任务、任务与中断之间的通信而准备的，可以在任务与任务、任务与中断之间传递消息，队列中可以存储有限的、大小固定的数据项目。任务与任务、任务与中断之间要交流的数据保存在队列中，叫做队列项目。队列所能保存的最大数据项目数量叫做队列的 长度，创建队列的时候会指定数据项目的大小和队列的长度。由于队列用来传递消息的，所以也称为消息队列。FreeRTOS 中的信号量的也是依据队列实现的。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>​信号量是操作系统中重要的一部分，信号量一般用来进行资源管理和任务同步，FreeRTOS 中信号量又分为二值信号量、计数型信号量、互斥信号量和递归互斥信号量。</p><p>​详细了解请自己查资料。</p><h2 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h2><h3 id="在CubeMX上配置FreeRTOS"><a href="#在CubeMX上配置FreeRTOS" class="headerlink" title="在CubeMX上配置FreeRTOS"></a>在CubeMX上配置FreeRTOS</h3><p>（一）首先，像往常一样需要先设置RCC、SYS以及时钟树，这里不做详细介绍。</p><p>需要提醒一点的是：裸机的时钟源默认是SysTick，但是开启FreeRTOS后，FreeRTOS会占用SysTick，所以需要需要为其他总线提供另外的时钟源。具体步骤如下图（以TIM7例）</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003013440220.png"></p><p>（二）开启FreeRTOS</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003013556891.png"></p><blockquote><p>vTaskDelay：任务A每次延时都是从调用延时函数vTaskDelay()开始算起的，延时是相对于这一时刻开始的，所以叫做相对延时函数。如果执行任务A的过程中发生中断，那么任务A执行的周期就会变长，所以使用相对延时函数vTaskDelay()，不能周期性的执行任务A。 </p><p>vTaskDelayUntil：从调用函数vTaskDelayUntil()开始，每隔固定周期，任务B的主体代码就会被执行一次，即使任务B在执行过程中发生中断，也不会影响这个周期性，只是会缩短其它任务的执行时间。所以这个函数被称为绝对延时函数，它可以用于周期性的执行任务B的主体代码。</p></blockquote><p><strong>config parameters</strong>系统内核配置：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003013959738.png"></p><h3 id="Keil中代码实现"><a href="#Keil中代码实现" class="headerlink" title="Keil中代码实现"></a>Keil中代码实现</h3><ol><li>创建任务</li></ol><p>创建任务函数：</p><pre><code>BaseType_t xTaskCreate(                        TaskFunction_t pxTaskCode,//函数指针，指向任务函数的入口                        const char * const pcName,//任务描述。主要用于调试                        const configSTACK_DEPTH_TYPE usStackDepth,//指定任务堆栈大小，能够支持的堆栈变量数量（堆栈深度），而字节数=堆栈深度*宽度（比如，在 16 位宽度的堆栈下，usStackDepth 定义为 100，则实际使用 200 字节堆栈存储空间）                        void * const pvParameters,//参数指针，当任务创建时，作为一个参数传递给任务，一般传进NULL                        UBaseType_t uxPriority,//任务优先级                        TaskHandle_t * const pxCreatedTask //回传句柄，创建任务后用这个句柄引用任务                      )</code></pre><p>应用举例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;宏定义各任务的堆栈大小及优先级#define TASK1_STK_SIZE     128#define TASK1_TASK_PRIO    2#define TASK2_STK_SIZE     128#define TASK2_TASK_PRIO    1&#x2F;&#x2F;定义任务句柄TaskHandle_t    Task1_Handler;    TaskHandle_t    Task2_Handler;&#x2F;&#x2F;函数声明void task1_(void * arg);void task2_(void * arg);void System_Task_Init(void);&#x2F;&#x2F;任务创建void System_Task_Init(void)&#123;xTaskCreate(task1_, &quot;task1_&quot;, TASK1_STK_SIZE, NULL, TASK1_TASK_PRIO, &amp;Task1_Handler);xTaskCreate(task2_, &quot;task2_&quot;, TASK2_STK_SIZE, NULL, TASK2_TASK_PRIO, &amp;Task2_Handler);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.任务函数</p><pre class="line-numbers language-none"><code class="language-none">void task1_(void * arg)&#123;int i1 &#x3D; 0;vTaskSuspend(Task2_Handler);&#x2F;&#x2F;一的优先级高于二，先挂起二for(;;)&#123;i1++;printf(&quot;任务一已执行次数：%d\r\n&quot;, i1);vTaskDelay(1000);if(i1 &gt; 3)&#123; vTaskResume(Task2_Handler); &#125;&#x2F;&#x2F;当一执行4次之后解挂二&#125;&#125;void task2_(void * arg)&#123;int i2 &#x3D; 0;vTaskDelete(Task1_Handler);&#x2F;&#x2F;第一次运行二时删除一for(;;)&#123;i2++;printf(&quot;任务二已执行次数：%d\r\n&quot;, i2);vTaskDelay(1000);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.开启任务</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003014555435.png"></p><blockquote><p>注意：</p><p>1.在任务调度器开启前创建任务：</p><p>初始化函数放在main函数MX_FREERTOS_Init()前面</p><p>2.在任务调度器开启后创建任务：</p><p>初始化函数放在 StartDefaultTask任务中。</p></blockquote><p>结果：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003014528997.png"></p><h3 id="队列的使用"><a href="#队列的使用" class="headerlink" title="队列的使用"></a>队列的使用</h3><p>结构体定义</p><pre class="line-numbers language-none"><code class="language-none">typedef struct&#123;  uint8_t port_num;  uint16_t len;  void* address;&#125; USART_COB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>·1、存储队列定义和初始化</p><pre class="line-numbers language-none"><code class="language-none">QueueHandle_t  USART_RxPort; &#x2F;&#x2F;全局变量USART_RxPort &#x3D; xQueueCreate(4,sizeof(USART_COB));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>原型：</p><p>xQueueHandle xQueueCreate( </p><p>unsigned portBASE_TYPE uxQueueLength,    &#x2F;&#x2F;队列中包含最大项目数量</p><p>unsigned portBASE_TYPE uxItemSize   &#x2F;&#x2F;队列中每个项目所需的字节数。</p><p>);</p></blockquote><p>2、定义回调函数</p><pre class="line-numbers language-none"><code class="language-none">uint32_t User_UART1_RxCpltCallback(uint8_t* Recv_Data, uint16_t ReceiveLen)&#123;  static USART_COB Usart_RxCOB;  &#x2F;&#x2F;Send To UART Receive Queue  if(USART_RxPort !&#x3D; NULL)  &#123;    Usart_RxCOB.port_num &#x3D; 1;    Usart_RxCOB.len      &#x3D; ReceiveLen;    Usart_RxCOB.address  &#x3D; Recv_Data;    xQueueSendFromISR(USART_RxPort,&amp;Usart_RxCOB,0); &#x2F;&#x2F;在中断中调用，需要中断保护版本，故此处不能用xQueueSend。  &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原型：</p><p>xQueueSendFromISR(</p><p>QueueHandle_t xQueue,   &#x2F;&#x2F;目标队列的句柄。</p><p>const void *pvItemToQueue,   &#x2F;&#x2F;发送数据的指针。</p><p>BaseType_t *pxHigherPriorityTaskWoken   </p><p>&#x2F;&#x2F;如果入队导致一个任务解锁，并且解锁的任务优先级高于当前被中断的任务，则将*pxHigherPriorityTaskWoken 设置成 pdTRUE。</p><p>);</p></blockquote><p>3、定义处理函数</p><pre class="line-numbers language-none"><code class="language-none">void Task_UsartRecieve(void *arg)&#123;   USART_COB Usart_RxCOB;   for(;;)  &#123;    &#x2F;* Usart Recevice Port *&#x2F;                                                                                                                                                                                                              if(xQueueReceive(USART_RxPort,&amp;Usart_RxCOB,portMAX_DELAY) &#x3D;&#x3D; pdPASS)      &#123;          &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原型：</p><p>xQueueReceive(</p><p>QueueHandle_t xQueue,&#x2F;&#x2F;被读队列的句柄。这个句柄即是调用 xQueueCreate() 创建该队列时的返回值。</p><p> void *pvBuffer,&#x2F;&#x2F;接收缓存指针。其指向一段内存区域，用于接收从队列中拷贝来的数据。</p><p> TickType_t xTicksToWait&#x2F;&#x2F;队列空时，阻塞超时的最大时间。如果该参数设置为 0，函数立刻返回。延时为 portMAX_DELAY 将导致任务无限阻塞。</p><p>);</p><p>返回值：队列项接收成功返回 pdTRUE，否则返回 pdFALSE。</p></blockquote><h1 id="上位机培训"><a href="#上位机培训" class="headerlink" title="上位机培训"></a>上位机培训</h1><h2 id="UpperMonitor库使用"><a href="#UpperMonitor库使用" class="headerlink" title="UpperMonitor库使用"></a>UpperMonitor库使用</h2><p>软件上位机：<a href="https://gitee.com/ennishsu/upper-monitor.git">https://gitee.com/ennishsu/upper-monitor.git</a></p><p>打开 ~.cpp 文件可以看到以下注释</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003124726584.png"></p><p>1、</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* Private variables ---------------------------------------------------------*&#x2F;extern moto_info_t motor_info;extern int target_speed;extern double kp;extern double ki;extern double kd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>uint8_t USART0_Sent_Choose_Data[9]&#x3D;{0,1,2,3,0,1,2,3,0};  此处也需要修改。需要观察n个数据就输入0-(n-1)，不足九位补齐九位。输入0-8也可。</p><p>2、</p><pre class="line-numbers language-none"><code class="language-none">void UpperMonitor_Sent_Choose(float * data)&#123;  uint8_t i;  for(i&#x3D;0;i&lt;Sent_Data_Num;i++)  &#123;    switch(USART0_Sent_Choose_Data[i])    &#123;      &#x2F;* ÒÔÏÂ²¿·ÖÓÃÓÚ¹Û²ì²ÎÊýÇúÏß *&#x2F;      case 0: data[i]&#x3D; motor_info.rotor_speed;          break;      case 1: data[i]&#x3D; target_speed;          break;      case 2: data[i]&#x3D; target_speed*1.05;         break;case 3: data[i]&#x3D; target_speed*0.95;         break;      default:break;  &#x2F;* ÒÔÉÏ²¿·ÖÓÃÓÚ¹Û²ì²ÎÊýÇúÏß *&#x2F;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、</p><pre class="line-numbers language-none"><code class="language-none">void PARAMETER_MODIFICATION(uint8_t * PARAMETER)&#123;  switch(PARAMETER[0])  &#123;    &#x2F;* ÒÔÏÂ²¿·ÖÓÃÓÚÐÞ¸Ä²ÎÊýÄÚÈÝ *&#x2F;case 0x00: kp &#x3D; PARAMETER_Change_float(PARAMETER+1);         break;case 0x01: ki &#x3D; PARAMETER_Change_float(PARAMETER+1); break;case 0x02: kd &#x3D; PARAMETER_Change_float(PARAMETER+1); break;&#x2F;* ÒÔÉÏ²¿·ÖÓÃÓÚÐÞ¸Ä²ÎÊýÄÚÈÝ *&#x2F;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、在中断中</p><pre class="line-numbers language-none"><code class="language-none">#define BUFFERSIZE 255    &#x2F;&#x2F;可接收最大数据量extern uint8_t Rx_len,bootfirst;extern uint8_t ReceiveBuff[BUFFERSIZE]; &#x2F;&#x2F;接收缓存区void USART1_IRQHandler(void)&#123;  &#x2F;* USER CODE BEGIN USART1_IRQn 0 *&#x2F;  &#x2F;* USER CODE END USART1_IRQn 0 *&#x2F;  HAL_UART_IRQHandler(&amp;huart1);  &#x2F;* USER CODE BEGIN USART1_IRQn 1 *&#x2F;uint32_t temp;if(USART1 &#x3D;&#x3D; huart1.Instance)&#123;if(RESET !&#x3D; __HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE))&#x2F;&#x2F;如果串口1为空闲&#123;__HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);&#x2F;&#x2F;清除中断标志位HAL_UART_DMAStop(&amp;huart1);&#x2F;&#x2F;停止DMA接收temp  &#x3D; __HAL_DMA_GET_COUNTER(&amp;hdma_usart1_rx);&#x2F;&#x2F;获取DMA当前还有多少未填充Rx_len &#x3D;  BUFFERSIZE - temp; &#x2F;&#x2F;计算串口接收到的数据个数RecHandle(ReceiveBuff,Rx_len);HAL_UART_Transmit_DMA(&amp;huart1,ReceiveBuff,Rx_len);&#x2F;&#x2F;发送数据Rx_len &#x3D; 0;&#x2F;&#x2F;接收数据长度清零HAL_UART_Receive_DMA(&amp;huart1,ReceiveBuff,BUFFERSIZE);&#x2F;&#x2F;开启下一次接收&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、在任务中调用</p><pre class="line-numbers language-none"><code class="language-none">Sent_Contorl(&amp;huart2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="上位机界面使用"><a href="#上位机界面使用" class="headerlink" title="上位机界面使用"></a>上位机界面使用</h2><h3 id="上位机调参"><a href="#上位机调参" class="headerlink" title="上位机调参"></a>上位机调参</h3><p>1、打开临时指令指令表，修改变量名</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221010162048056.png"></p><p>2、打开上位机软件</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003133231406.png"></p><h3 id="曲线显示"><a href="#曲线显示" class="headerlink" title="曲线显示"></a>曲线显示</h3><p>鼠标移到右上角，即可显示相关曲线</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003133600904.png"></p><h3 id="光标调节"><a href="#光标调节" class="headerlink" title="光标调节"></a>光标调节</h3><p>右键黑屏，可以调出光标</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221003133629067.png"></p><h3 id="曲线横向放大-x2F-纵向放大"><a href="#曲线横向放大-x2F-纵向放大" class="headerlink" title="曲线横向放大&#x2F;纵向放大"></a>曲线横向放大&#x2F;纵向放大</h3><p>Shift+滚轮</p><p>Ctrl+滚轮</p><p>滚轮</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]STM32F1 FreeRTOS开发手册  ALIENTEK</p><p>[2]FreeRTOS系列 CSDN：冬瓜~</p><p>[3]FreeRTOS学习笔记 by Tzrrr</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freertos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter2 空间描述和变换</title>
      <link href="/2023/01/12/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter2%20%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0%E5%92%8C%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/01/12/Learn/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E5%AF%BC%E8%AE%BA/Chapter2%20%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0%E5%92%8C%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Chapter2-空间描述和变换"><a href="#Chapter2-空间描述和变换" class="headerlink" title="Chapter2 空间描述和变换"></a>Chapter2 空间描述和变换</h1><h2 id="描述：位置、姿态与位姿"><a href="#描述：位置、姿态与位姿" class="headerlink" title="描述：位置、姿态与位姿"></a>描述：位置、姿态与位姿</h2><h3 id="位置描述"><a href="#位置描述" class="headerlink" title="位置描述"></a>位置描述</h3><p>^A^P,是指^A^P的元素数值是在坐标系{A}的轴线方向的距离。沿着坐标轴的每个距离可被认为是矢量在相应坐标轴上的投影。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111162226899.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111162731102.png"></p><h3 id="姿态描述"><a href="#姿态描述" class="headerlink" title="姿态描述"></a>姿态描述</h3><p>点的位置可用矢量描述，物体的姿态可用固定在物体上的坐标系来描述。</p><p>描述坐标系B的一种方法是利用坐标系A的三个主轴单位矢量来表示。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111163604444.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111163930715.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111164141647.png"></p><h3 id="位姿描述"><a href="#位姿描述" class="headerlink" title="位姿描述"></a>位姿描述</h3><p>位置和姿态成对出现，我们将此组合称为位姿。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111164544025.png"></p><h2 id="映射：从一个坐标系到另一个坐标系"><a href="#映射：从一个坐标系到另一个坐标系" class="headerlink" title="映射：从一个坐标系到另一个坐标系"></a>映射：从一个坐标系到另一个坐标系</h2><h3 id="坐标平移"><a href="#坐标平移" class="headerlink" title="坐标平移"></a>坐标平移</h3><p>平移下可用矢量^A^P<del>BORG</del>表示{B}的原点相对于{A}的位置。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111175753238.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111180730512.png"></p><h3 id="坐标旋转"><a href="#坐标旋转" class="headerlink" title="坐标旋转"></a>坐标旋转</h3><p>旋转矩阵各列的模均为1，并且这些单位矢量均相互正交。如前所述，可得：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111181449677.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111181941068.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111184034737.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111184354658.png"></p><p>上式进行了映射——它是矢量变换的描述——将空间某点相对于{B}的描述^B^P转换成了该点相对于{A}的描述^A^P。</p><h3 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2.1"></a>Example 2.1</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111184858973.png"></p><h3 id="一般变换"><a href="#一般变换" class="headerlink" title="一般变换"></a>一般变换</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111190906556.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111191231909.png"></p><p>引入一个新概念：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111191639010.png"></p><p>等效如下：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111191647832.png"></p><p>容易看出该式可写成：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111192833265.png"></p><h3 id="Example-2-2"><a href="#Example-2-2" class="headerlink" title="Example 2.2"></a>Example 2.2</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111192931300.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111192946168.png"></p><h2 id="算子：平移、旋转和变换"><a href="#算子：平移、旋转和变换" class="headerlink" title="算子：平移、旋转和变换"></a>算子：平移、旋转和变换</h2><h3 id="平移算子"><a href="#平移算子" class="headerlink" title="平移算子"></a>平移算子</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111194615448.png"></p><h3 id="旋转算子"><a href="#旋转算子" class="headerlink" title="旋转算子"></a>旋转算子</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111194710066.png"></p><h3 id="Example-2-3"><a href="#Example-2-3" class="headerlink" title="Example 2.3"></a>Example 2.3</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111194738553.png"></p><h3 id="变换算子"><a href="#变换算子" class="headerlink" title="变换算子"></a>变换算子</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111195524783.png"></p><p>跟上述式子相同。</p><h3 id="Example-2-4"><a href="#Example-2-4" class="headerlink" title="Example 2.4"></a>Example 2.4</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111195637494.png"></p><h2 id="变换的计算"><a href="#变换的计算" class="headerlink" title="变换的计算"></a>变换的计算</h2><h3 id="复合变换"><a href="#复合变换" class="headerlink" title="复合变换"></a>复合变换</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111200521027.png"></p><p>因此可得：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111200641295.png"></p><h3 id="逆变换"><a href="#逆变换" class="headerlink" title="逆变换"></a>逆变换</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111201148394.png"></p><p>如上，可以看到：R相对应的是矩阵的转置。T相对应的是矩阵的逆。</p><p><strong><u>特别注意位移部分</u></strong></p><h3 id="Example-2-5"><a href="#Example-2-5" class="headerlink" title="Example 2.5"></a>Example 2.5</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112111313113.png"></p><h2 id="变换方程"><a href="#变换方程" class="headerlink" title="变换方程"></a>变换方程</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112112822855.png"></p><p>没有什么特别的地方，跟上文差不多。变换的最后左边和右边上下标相同。</p><h2 id="其他姿态描述"><a href="#其他姿态描述" class="headerlink" title="其他姿态描述"></a>其他姿态描述</h2><h3 id="X-Y-Z固定角"><a href="#X-Y-Z固定角" class="headerlink" title="X-Y-Z固定角"></a>X-Y-Z固定角</h3><p>每次旋转都是绕着参考坐标系各轴的。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114043671.png" alt="条件前提"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114027343.png" alt="旋转矩阵"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114106015.png" alt="X-Y-Z旋转矩阵"></p><p>要记住这里给定的三个旋转顺序，仅当旋转是按照这个顺序进行时方程才是正确的。</p><p>旋转一般时不满足交换律的，即<img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114240450.png">二者是不同的。</p><p>常令人感兴趣的是逆问题，即从旋转矩阵等价推出X-Y-Z固定角。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114420312.png" alt="旋转矩阵求X-Y-Z固定角"></p><h3 id="Z-Y-X欧拉角"><a href="#Z-Y-X欧拉角" class="headerlink" title="Z-Y-X欧拉角"></a>Z-Y-X欧拉角</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112115945625.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112115955223.png" alt="前提条件"></p><p>每次都是绕运动坐标系{B}的各轴旋转而不是绕固定坐标系{A}的各轴旋转。这样三个一组的旋转被称为<strong>欧拉角</strong>。</p><p>由于三个旋转分别是绕着Z^^^、Y^^^、X^^^，所以称这种表示法为Z-Y-X欧拉角。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114855946.png" alt="Z-Y-X欧拉角"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114919928.png" alt="旋转矩阵"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112114946855.png" alt="Z-Y-X旋转矩阵"></p><p><strong>注意：这个结果与以相反顺序绕固定轴旋转三次得到的结果完全相同！总之，这是一个不太直观的结果：三次绕固定轴旋转的最终姿态和以相反顺序绕运动坐标轴转动的最终姿态相同。</strong></p><h3 id="Z-Y-Z欧拉角"><a href="#Z-Y-Z欧拉角" class="headerlink" title="Z-Y-Z欧拉角"></a>Z-Y-Z欧拉角</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112115919163.png" alt="前提条件"></p><p>按照推导，可得等价矩阵</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112120053799.png" alt="旋转矩阵"></p><p>如果sinβ !&#x3D; 0，有</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112120142270.png" alt="逆解"></p><h3 id="其他转角组合"><a href="#其他转角组合" class="headerlink" title="其他转角组合"></a>其他转角组合</h3><h4 id="等效角度-轴线表示法"><a href="#等效角度-轴线表示法" class="headerlink" title="等效角度-轴线表示法"></a>等效角度-轴线表示法</h4><p>略</p><h4 id="欧拉参数"><a href="#欧拉参数" class="headerlink" title="欧拉参数"></a>欧拉参数</h4><p>此处已做过讨论：[四元数与欧拉角与旋转矩阵](<a href="https://potzrrr.top/2023/01/11/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/">四元数与欧拉角与旋转矩阵 | ZRong’s Blog (potzrrr.top)</a>)</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112120330489.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230112120459255.png" alt="四维超球面"></p><p>这个关系总是保持不变。因此，姿态可以看作是四维空间中单位超球面上的一点。</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学导论 </tag>
            
            <tag> 空间描述和变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kalman Filter</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/Kalman%20Filter/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/Kalman%20Filter/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Kalman-Filter"><a href="#Kalman-Filter" class="headerlink" title="Kalman Filter"></a>Kalman Filter</h1><p>Learn by DR_CAN</p><h2 id="Part1-Recursive-Algorithm-递归算法"><a href="#Part1-Recursive-Algorithm-递归算法" class="headerlink" title="Part1 Recursive Algorithm 递归算法"></a>Part1 Recursive Algorithm 递归算法</h2><h3 id="1-1-一句话概括"><a href="#1-1-一句话概括" class="headerlink" title="1.1 一句话概括"></a>1.1 一句话概括</h3><p>Optimal Recursive Data Processing Algorithm 最优化递归数字处理算法</p><h3 id="1-2-不确定性"><a href="#1-2-不确定性" class="headerlink" title="1.2 不确定性"></a>1.2 不确定性</h3><ul><li>不存在完美的数学模型</li><li>系统的扰动不可控，也很难建模</li><li>测量传感器存在误差</li></ul><h3 id="1-3-Example"><a href="#1-3-Example" class="headerlink" title="1.3 Example"></a>1.3 Example</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220913220448956.png"></p><p><strong>由上式可知，随着k的增加，测量结果不再重要。</strong></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220913220418191.png"></p><h3 id="1-4-Step"><a href="#1-4-Step" class="headerlink" title="1.4 Step"></a>1.4 Step</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914170031982.png"></p><h2 id="Part2-Data-Fusion-数据融合"><a href="#Part2-Data-Fusion-数据融合" class="headerlink" title="Part2 Data Fusion 数据融合"></a>Part2 Data Fusion 数据融合</h2><h3 id="1-1-Example"><a href="#1-1-Example" class="headerlink" title="1.1 Example"></a>1.1 Example</h3><p>Use math to solve a ploblem which has two sets of data.</p><p>假设有两把秤，测重量。</p><p>其中一把秤得到30g，已知其标准差为2g；另一把秤得到32g，标准差为4g。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914202400147.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914202448915.png"></p><h3 id="1-2-Covariance-Matrix-协方差矩阵"><a href="#1-2-Covariance-Matrix-协方差矩阵" class="headerlink" title="1.2 Covariance Matrix 协方差矩阵"></a>1.2 Covariance Matrix 协方差矩阵</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914210137551.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914210229505.png"></p><h3 id="1-3-State-Space-Representation"><a href="#1-3-State-Space-Representation" class="headerlink" title="1.3 State Space Representation"></a>1.3 State Space Representation</h3><p><strong>见现代控制理论状态空间方程的表示。</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914210510464.png"></h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914210749768.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220914211339976.png"></p><h2 id="Part3-Step-by-Step-Derivation-of-Kalman-Gain"><a href="#Part3-Step-by-Step-Derivation-of-Kalman-Gain" class="headerlink" title="Part3 Step by Step Derivation of Kalman Gain"></a>Part3 Step by Step Derivation of Kalman Gain</h2><p><a href="https://www.bilibili.com/video/BV1hC4y1b7K7?spm_id_from=333.999.0.0&vd_source=dc5a7d7190173a321a8ae3df82a10d84">【卡尔曼滤波器】3_卡尔曼增益超详细数学推导 ～全网最完整_哔哩哔哩_bilibili</a></p><p><u><strong>跟着学一遍</strong></u></p><h3 id="1-1-建立状态空间方程"><a href="#1-1-建立状态空间方程" class="headerlink" title="1.1 建立状态空间方程"></a>1.1 建立状态空间方程</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220915191708100.png"></p><h3 id="1-2-寻找增益k值，使得方差最小"><a href="#1-2-寻找增益k值，使得方差最小" class="headerlink" title="1.2 寻找增益k值，使得方差最小"></a>1.2 寻找增益k值，使得方差最小</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220916001619736.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220916001603500.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220916002220270.png"></p><h2 id="Part4-Priori-x2F-Posterrori-Error-Covariance-Matrix-先验-x2F-后验误差协方差矩阵"><a href="#Part4-Priori-x2F-Posterrori-Error-Covariance-Matrix-先验-x2F-后验误差协方差矩阵" class="headerlink" title="Part4 Priori&#x2F;Posterrori Error Covariance Matrix 先验&#x2F;后验误差协方差矩阵"></a>Part4 Priori&#x2F;Posterrori Error Covariance Matrix 先验&#x2F;后验误差协方差矩阵</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917005157630.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917004952941.png"></p><h2 id="Part5-An-Example"><a href="#Part5-An-Example" class="headerlink" title="Part5 An Example"></a>Part5 An Example</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917010043597.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917011807619.png"></p><h3 id="如果测量误差小"><a href="#如果测量误差小" class="headerlink" title="如果测量误差小"></a>如果测量误差小</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917011914629.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917011853695.png"></p><h3 id="如果测量误差大"><a href="#如果测量误差大" class="headerlink" title="如果测量误差大"></a>如果测量误差大</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917012021251.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917012032856.png"></p><h2 id="Part6-Extended-Kalman-Filter-扩展卡尔曼滤波器"><a href="#Part6-Extended-Kalman-Filter-扩展卡尔曼滤波器" class="headerlink" title="Part6 Extended Kalman Filter 扩展卡尔曼滤波器"></a>Part6 Extended Kalman Filter 扩展卡尔曼滤波器</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220917012759494.png"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kalman Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cubeide移植到vscode</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/cubeide%E7%A7%BB%E6%A4%8D%E5%88%B0vscode/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/cubeide%E7%A7%BB%E6%A4%8D%E5%88%B0vscode/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="1、首先用vscode打开工程文件夹"><a href="#1、首先用vscode打开工程文件夹" class="headerlink" title="1、首先用vscode打开工程文件夹"></a>1、首先用vscode打开工程文件夹</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230106104756153.png"></p><h2 id="2、按ctrl-P，输入-gt-c-x2F-c-，选择第一个，Edit-Configurations-UI"><a href="#2、按ctrl-P，输入-gt-c-x2F-c-，选择第一个，Edit-Configurations-UI" class="headerlink" title="2、按ctrl+P，输入&gt;c&#x2F;c++，选择第一个，Edit Configurations(UI)"></a>2、按ctrl+P，输入&gt;c&#x2F;c++，选择第一个，Edit Configurations(UI)</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230106105124576.png"></p><h2 id="3、打开左边json文件"><a href="#3、打开左边json文件" class="headerlink" title="3、打开左边json文件"></a>3、打开左边json文件</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230106110828297.png"></p><h2 id="4、配置代码如下"><a href="#4、配置代码如下" class="headerlink" title="4、配置代码如下"></a>4、配置代码如下</h2><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;STM32&quot;,            &quot;includePath&quot;: [                &quot;$&#123;workspaceFolder&#125;&#x2F;**&quot;,                     &quot;$&#123;workspaceFolder&#125;&#x2F;Drivers&#x2F;STM32F7xx_HAL_Driver&#x2F;Inc&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Drivers&#x2F;STM32F7xx_HAL_Driver&#x2F;Inc&#x2F;Legacy&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Drivers&#x2F;CMSIS&#x2F;Device&#x2F;ST&#x2F;STM32F7xx&#x2F;Include&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Drivers&#x2F;CMSIS&#x2F;Include&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;USER&#x2F;drivers&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Core&#x2F;Inc&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Middlewares&#x2F;Third_Party&#x2F;FreeRTOS&#x2F;Source&#x2F;include&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Middlewares&#x2F;Third_Party&#x2F;FreeRTOS&#x2F;Source&#x2F;CMSIS_RTOS_V2&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;Middlewares&#x2F;Third_Party&#x2F;FreeRTOS&#x2F;Source&#x2F;portable&#x2F;GCC&#x2F;ARM_CM7&#x2F;r0p1&#x2F;&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;USER&#x2F;drivers&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;USER&#x2F;modules&quot;,                &quot;$&#123;workspaceFolder&#125;&#x2F;eigen3&#x2F;Eigen&quot;,                &quot;D:&#x2F;ST&#x2F;STM32CubeIDE_1.5.0&#x2F;STM32CubeIDE&#x2F;plugins&#x2F;com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.7-2018-q2-update.win32_1.5.0.202011040924&#x2F;tools&#x2F;arm-none-eabi&#x2F;include&#x2F;**&quot;,                &quot;D:&#x2F;ST&#x2F;STM32CubeIDE_1.5.0&#x2F;STM32CubeIDE&#x2F;plugins&#x2F;com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.7-2018-q2-update.win32_1.5.0.202011040924&#x2F;tools&#x2F;lib&#x2F;gcc&#x2F;arm-none-eabi&#x2F;7.3.1&#x2F;include&#x2F;**&quot;            ],            &quot;defines&quot;: [                &quot;__CC_ARM&quot;,                &quot;USE_HAL_DRIVER&quot;,                &quot;STM32F767xx&quot;,            ],            &quot;compilerPath&quot;: &quot;D:\\ST\\STM32CubeIDE_1.5.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.7-2018-q2-update.win32_1.5.0.202011040924\\tools\\arm-none-eabi\\include\\machine\\_default_types.h&quot;,            &quot;cStandard&quot;: &quot;c99&quot;,            &quot;cppStandard&quot;: &quot;c++11&quot;,            &quot;intelliSenseMode&quot;: &quot;$&#123;default&#125;&quot;        &#125;    ],    &quot;version&quot;: 4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意修改几个地方，如下所示</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230106142814849.png"></p><h3 id="此处踩坑！坑如下"><a href="#此处踩坑！坑如下" class="headerlink" title="此处踩坑！坑如下"></a>此处踩坑！坑如下</h3><h4 id="1、uint32-t"><a href="#1、uint32-t" class="headerlink" title="1、uint32_t"></a>1、uint32_t</h4><p>解决方案：添加_CC_ARM如图</p><h4 id="2、LL库报错"><a href="#2、LL库报错" class="headerlink" title="2、LL库报错"></a>2、LL库报错</h4><p>理由是添加了USE_FULL_LL_DRIVER</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230106142951618.png"></p><p>注意，不能加！</p><h4 id="3、没有stdint-h-stddef-h文件"><a href="#3、没有stdint-h-stddef-h文件" class="headerlink" title="3、没有stdint.h   stddef.h文件"></a>3、没有stdint.h   stddef.h文件</h4><p>问题原因：这个是ide本身的文件，Workspace里没有，要手动添加</p><p>解决方案：找到电脑中文件的位置，添加路径</p><p>“D:&#x2F;ST&#x2F;STM32CubeIDE_1.5.0&#x2F;STM32CubeIDE&#x2F;plugins&#x2F;com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.7-2018-q2-update.win32_1.5.0.202011040924&#x2F;tools&#x2F;arm-none-eabi&#x2F;include&#x2F;“,<br> “D:&#x2F;ST&#x2F;STM32CubeIDE_1.5.0&#x2F;STM32CubeIDE&#x2F;plugins&#x2F;com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.7-2018-q2-update.win32_1.5.0.202011040924&#x2F;tools&#x2F;lib&#x2F;gcc&#x2F;arm-none-eabi&#x2F;7.3.1&#x2F;include&#x2F;“</p><h2 id="正常移植到此完美结束"><a href="#正常移植到此完美结束" class="headerlink" title="正常移植到此完美结束"></a>正常移植到此完美结束</h2>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cubeide </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多旋翼飞行器控制与设计</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E5%A4%9A%E6%97%8B%E7%BF%BC%E9%A3%9E%E8%A1%8C%E5%99%A8%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E5%A4%9A%E6%97%8B%E7%BF%BC%E9%A3%9E%E8%A1%8C%E5%99%A8%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="动态模型和参数测量"><a href="#动态模型和参数测量" class="headerlink" title="动态模型和参数测量"></a>动态模型和参数测量</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221019163939091.png"></p><h3 id="刚体运动学模型"><a href="#刚体运动学模型" class="headerlink" title="刚体运动学模型"></a>刚体运动学模型</h3><p>运动学与质量和受力无关，只研究位置、速度、姿态和角速度等变量。</p><p>输入为速度和角速度，输出为位置和姿态。</p><h4 id="欧拉角模型"><a href="#欧拉角模型" class="headerlink" title="欧拉角模型"></a>欧拉角模型</h4><h4 id="旋转矩阵模型"><a href="#旋转矩阵模型" class="headerlink" title="旋转矩阵模型"></a>旋转矩阵模型</h4><h4 id="四元数模型"><a href="#四元数模型" class="headerlink" title="四元数模型"></a>四元数模型</h4><h3 id="刚体动力学模型"><a href="#刚体动力学模型" class="headerlink" title="刚体动力学模型"></a>刚体动力学模型</h3><p>动力学既涉及运动又涉及受力情况，与物体的质量和转动惯量有关。</p><p>输入为拉力和力矩（俯仰力矩、滚转力矩和偏航力矩），输出为速度和角速度。</p><h4 id="位置运动学模型"><a href="#位置运动学模型" class="headerlink" title="位置运动学模型"></a>位置运动学模型</h4><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152223230.png"></p><p>进一步，可以得到</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152245888.png"></p><p>f表示螺旋桨拉力总大小，g为重力加速度</p><h4 id="姿态动力学模型"><a href="#姿态动力学模型" class="headerlink" title="姿态动力学模型"></a>姿态动力学模型</h4><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152307960.png"></p><p>Ga表示陀螺力矩，t表示螺旋桨在机体轴上产生的力矩。</p><h3 id="多旋翼飞行控制刚体模型"><a href="#多旋翼飞行控制刚体模型" class="headerlink" title="多旋翼飞行控制刚体模型"></a>多旋翼飞行控制刚体模型</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152006578.png"></p><h3 id="控制效率模型"><a href="#控制效率模型" class="headerlink" title="控制效率模型"></a>控制效率模型</h3><p>输入是螺旋桨转速，输出是拉力和力矩。</p><p>控制效率模型的逆过程成为控制分配模型，即当通过控制器设计得到期望的拉力和力矩时，可以通过控制分配模型解出所需的螺旋桨转速。</p><h4 id="单个螺旋桨拉力和反扭距模型"><a href="#单个螺旋桨拉力和反扭距模型" class="headerlink" title="单个螺旋桨拉力和反扭距模型"></a>单个螺旋桨拉力和反扭距模型</h4><p>当多旋翼在无风情况下悬停时，其螺旋桨拉力表示为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152934201.png"></p><p>其中，<img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021152954025.png">。</p><p>反扭矩大小静态模型表示为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153023683.png"></p><p>其中，<img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153102833.png">。</p><p>反扭距大小动态模型：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153218027.png"></p><h4 id="拉力和力矩模型"><a href="#拉力和力矩模型" class="headerlink" title="拉力和力矩模型"></a>拉力和力矩模型</h4><p>作用在四旋翼上的总拉力：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153323008.png"></p><p>对于**<u>十字形四旋翼</u>**，螺旋桨产生的力矩为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153350931.png"></p><p>于是，联立以上两式有：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153419530.png"></p><p>对于**<u>X字形四旋翼</u>**，螺旋桨产生的力矩为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153842065.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021153854395.png"></p><p>对于**<u>多旋翼</u>**：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221021172735390.png"></p><h3 id="动力单元模型"><a href="#动力单元模型" class="headerlink" title="动力单元模型"></a>动力单元模型</h3><p>动力单元是以无刷直流电机、电调和螺旋桨为一组的整个动力机构。</p><p>输入是油门指令，输出是螺旋桨拉力的模型。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221022101946961.png"></p><p>完整的动力单元模型如下：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221022102209331.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221022103551683.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221022103609861.png" alt="image-20221022103609861"></p><blockquote><p>一阶低通滤波：</p><p><a href="https://zhuanlan.zhihu.com/p/42935576">一阶低通滤波（LPF）的原理及应用（以APM&#x2F;PX4飞控为例） - 知乎 (zhihu.com)</a></p></blockquote><h3 id="桨叶挥舞"><a href="#桨叶挥舞" class="headerlink" title="桨叶挥舞"></a>桨叶挥舞</h3><p>桨叶挥舞是旋转桨叶的上下运动。如图所示，逆风飞行的前行桨叶会获得更大的相对速度，而速度增加将产生更大的拉力，同时产生向上挥舞速度。向上挥舞速度会减小迎角，进而减小拉力。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221023093815547.png"></p><h2 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h2><h3 id="三轴加速度计"><a href="#三轴加速度计" class="headerlink" title="三轴加速度计"></a>三轴加速度计</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012155505721.png"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>当加速度计保持静止时，加速度计能够感知重力加速度，而整体加速度为零</li><li>在自由落体运动中，整体加速度就是重力加速度，但加速度计内部处于失重状态，而此时三轴加速度计输出为零</li><li>在自由落体运动中，三轴加速度计的输出并不是它的真实加速度，而是它的加速度去掉重力后的整体加速度。因此，三轴加速度计可以测量物体的比力。</li></ul><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012160117959.png"></p><p>加速度计能够精确的测量俯仰角和滚转角，且没有累计误差。</p><h4 id="MEMS三轴加速度计"><a href="#MEMS三轴加速度计" class="headerlink" title="MEMS三轴加速度计"></a>MEMS三轴加速度计</h4><p>采用压阻式、压电式和电容式工作原理，产生的比力分别正比于电阻、电压和电容的变化。</p><p>这种变化可以通过相应<strong>放大</strong>和<strong>滤波</strong>电路进行采集。</p><ul><li>缺点：受振动影响较大。</li><li>优点：可以做到很小</li></ul><h4 id="校正"><a href="#校正" class="headerlink" title="校正"></a>校正</h4><p>（1）校正</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012162158405.png"></p><p>（2）自动校正</p><p>一般校正：需要外部标定设备，麻烦但精确</p><p>自动校正：不需要外部标定设备，简单 ，精度略微差</p><h5 id="误差模型"><a href="#误差模型" class="headerlink" title="误差模型"></a>误差模型</h5><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012211946087.png"></p><p> <img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012215248194.png"></p><h5 id="测量模型"><a href="#测量模型" class="headerlink" title="测量模型"></a>测量模型</h5><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221012220347761.png"></p><blockquote><p>何为高斯白噪声？</p><p>百度百科上解释为“<strong>高斯白噪声，幅度分布服从高斯分布，功率谱密度服从均匀分布</strong>”。</p><p>白噪声，如同白光一样，是所有颜色的光叠加而成，不同颜色的光本质区别是的它们的频率各不相同（如红色光波长长而频率低，相应的，紫色光波长短而频率高）。白噪声在功率谱上（若以频率为横轴，信号幅度的平方为功率）趋近为常值，即噪声频率丰富，在整个频谱上都有成分，即从低频到高频，<strong>低频指的是信号不变或缓慢变化，高频指的是信号突变</strong>。</p><p>白噪声信号是“随机”的。</p><p>那么，回到文章开头的解释：<strong>高斯白噪声，幅度分布服从高斯分布，功率谱密度服从均匀分布。</strong>它的意义就很明确了，上半句是从空域(幅值)角度描述“高斯噪声”，而下半句是从频域角度描述“白噪声”。</p></blockquote><blockquote><p>为什么产生漂移？</p><p>大部分MEMS均是以半导体材料为基础加工的，半导体对温度敏感，再加上安装、电路设计等因素的影响。</p></blockquote><h3 id="三轴陀螺仪"><a href="#三轴陀螺仪" class="headerlink" title="三轴陀螺仪"></a>三轴陀螺仪</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>MEMS三轴陀螺仪用到的一个基本的物理原理：科里奥利力</p><p> <img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221013155545058.png"></p><p>在陀螺仪中，两个质量块运动的速度方向相反，大小相同，如图所示。</p><p>从而产生的科里奥利力方向相反，压迫两块对应的电容板移动，产生电容差分变化，电容的变化正比于旋转的角速度。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221013160705853.png"></p><ul><li>电容的变化正比于旋转角速度</li><li>纯加速度并不能使陀螺仪产生读数</li></ul><h4 id="校正-1"><a href="#校正-1" class="headerlink" title="校正"></a>校正</h4><h5 id="误差模型-1"><a href="#误差模型-1" class="headerlink" title="误差模型"></a>误差模型</h5><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221013161722841.png"></p><h5 id="校正方法"><a href="#校正方法" class="headerlink" title="校正方法"></a>校正方法</h5><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221013163003155.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221013164814176.png"></p><blockquote><p>龙格库塔法</p></blockquote><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221014155923500.png"></p><h5 id="测量模型-1"><a href="#测量模型-1" class="headerlink" title="测量模型"></a>测量模型</h5><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221014155641676.png"></p><h3 id="三轴磁力计"><a href="#三轴磁力计" class="headerlink" title="三轴磁力计"></a>三轴磁力计</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20221014164233288.png"></p><h3 id="超声波测距仪"><a href="#超声波测距仪" class="headerlink" title="超声波测距仪"></a>超声波测距仪</h3><p>超声波是一种频率超出人耳听觉频率的声波，大于20kHz。具有良好的方向性和强大的穿透性。</p><h3 id="气压计"><a href="#气压计" class="headerlink" title="气压计"></a>气压计</h3><p>如果多旋翼悬停高度距离地面过大，超声波测距仪就会失效，这时应当使用气压计。</p><h2 id="可观性和卡尔曼滤波器"><a href="#可观性和卡尔曼滤波器" class="headerlink" title="可观性和卡尔曼滤波器"></a>可观性和卡尔曼滤波器</h2><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>涵道无人机建模</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E6%B6%B5%E9%81%93%EF%BC%9A%E6%B6%B5%E9%81%93%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%BB%BA%E6%A8%A1/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E6%B6%B5%E9%81%93%EF%BC%9A%E6%B6%B5%E9%81%93%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="无人机建模及运动方程"><a href="#无人机建模及运动方程" class="headerlink" title="无人机建模及运动方程"></a>无人机建模及运动方程</h2><h3 id="坐标系定义及运动方程"><a href="#坐标系定义及运动方程" class="headerlink" title="坐标系定义及运动方程"></a>坐标系定义及运动方程</h3><h4 id="坐标系定义"><a href="#坐标系定义" class="headerlink" title="坐标系定义"></a>坐标系定义</h4><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108103216237.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108103159942.png" alt="-"></p><p>坐标如图所示：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108103712962.png"></p><h4 id="运动学方程"><a href="#运动学方程" class="headerlink" title="运动学方程"></a>运动学方程</h4><p>六自由度刚体的运动学方程：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108102927616.png"></p><p>旋转矩阵的导数：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108103007669.png"></p><h4 id="动力学方程"><a href="#动力学方程" class="headerlink" title="动力学方程"></a>动力学方程</h4><p>动量定理和角动量定理只有在惯性系(NED系)中才成立，因此在非惯性系(机体系)中表示的动力学方程需要通过旋转变换得到。</p><p>在NED系中由动量定理，有</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108105110754.png"></p><p>其实，G&#x3D;mg为无人机所受重力，F为除重力外其他力的矢量和。</p><p>在非惯性系下表示该方程：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108105210913.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108105220625.png"></p><p>代入NED系动量定理，可得</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108105227121.png"></p><p>欧拉动力学方程：</p><p>惯性张量在NED中的表示是一个变量，而在机体系中的表示是一个常量，因此旋转动力学方程一般在机体系中表示。</p><p>推导见论文P24</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108112255632.png"></p><p>整理合并，得涵道无人机得非线性模型：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108113242454.png"></p><h2 id="单涵道动力学分析"><a href="#单涵道动力学分析" class="headerlink" title="单涵道动力学分析"></a>单涵道动力学分析</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108114441049.png"></p><h3 id="空气阻力"><a href="#空气阻力" class="headerlink" title="空气阻力"></a>空气阻力</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108114623458.png"></p><blockquote><p>飞机的升力公式详解<br>Y&#x3D;1&#x2F;2ρCSv²<br>式中：<br>Y是总升力，（单位是：牛顿，即N，1千克力约等于10牛顿）</p><p>C是升力系数，是个不名数，没有单位，是通过风洞实验测出的系数，但一般可按1进行粗略计算，升力系数和机翼的翼型（就是机翼断面的形状，一般前圆后尖、上曲下平、较厚的，例如达到弦长的15%的翼型具有较大的升力系数）、迎角（就是翼弦与气流的夹角，升力系数与迎角正相关，较厚的机翼允许迎角较大，例如10～12°，较薄的机翼不允许大迎角，只能6～8°，太大就会因升力系数迅速减小而失速）、展弦比（展弦比越大，升力系数越大）、机翼表面的光滑程度（越光滑升力系数越大）有关。</p><p>展弦比：翼长的平方除以翼的面积</p><p>S是机翼的面积（单位是：平方米，即m2）。</p><p>v是飞机的速度（单位是：米&#x2F;秒，即m&#x2F;s，如果的公里&#x2F;小时就要除以3.6，换算成米&#x2F;秒；如果是顶风，就要用飞机的速度加风速，如果是顺风，就要用飞机的速度减风速，单位都用米&#x2F;秒）。注意，公式里是平方。速度大三倍，升力大九倍。</p><p>ρ是大气密度（和当地海拔高度、气温、湿度有关，海拔500米之下可按1.2计算，单位是：千克&#x2F;立方米，即Kg&#x2F;m3）。</p></blockquote><h3 id="涵道内部风扇"><a href="#涵道内部风扇" class="headerlink" title="涵道内部风扇"></a>涵道内部风扇</h3><p>假设流动为管流，建立涵道风扇轴流状态的管流模型。气体在无穷远处速度为Vc，经过风扇桨盘时加速至Vc+Vi，最终以Vc+V2形成尾迹。如图所示。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108161630475.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108163843366.png"></p><blockquote><p>涵道体上产生的拉力？</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108163946929.png"></p></blockquote><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108164543358.png"></p><blockquote><p>理想正压流体在有势体积力作用下作定常运动时，运动方程(即欧拉方程)沿流线积分而得到的表达运动流体机械能守恒的方程。因著名的瑞士科学家D.伯努利于1738年提出而得名。对于重力场中的不可压缩均质流体 ，方程为p+ρgh+(1&#x2F;2)*ρv^2&#x3D;c　式中p、ρ、v分别为流体的压强、密度和速度；h为铅垂高度；g为重力加速度ρgh和动能(1&#x2F;2)*ρv ^2，在沿流线运动过程中，总和保持不变，即总能量守恒。但各流线之间总能量（即上式中的常量值）可能不同。对于气体，可忽略重力，方程简化为p+(1&#x2F;2)*ρv ^2&#x3D;常量(p0)，各项分别称为静压 、动压和总压。</p></blockquote><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108164621695.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108170557006.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108170706121.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108170838419.png"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230108170936059.png"></p><h3 id="涵道动力学"><a href="#涵道动力学" class="headerlink" title="涵道动力学"></a>涵道动力学</h3><p> 略</p><h3 id="涵道底部控制舵"><a href="#涵道底部控制舵" class="headerlink" title="涵道底部控制舵"></a>涵道底部控制舵</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109213745427.png"></p><p>每个操纵面上产生的升力可表示为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109221947035.png"></p><p>其中，k为操纵面气动升力系数，和攻角有关。Vi+Vc为涵道出口气流流速。</p><blockquote><p>攻角，指的是飞机机翼弦线与相对风的夹角。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109222150764.png"></p></blockquote><p>由操纵面产生的作用于机体的力和力矩可分别表示为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109223101909.png"></p><p>其中，Mc为驱动力矩，Tx、Ty、Tz为驱动力矩在机体系坐标轴上的投影。</p><h3 id="固定气动面动力学和陀螺力矩"><a href="#固定气动面动力学和陀螺力矩" class="headerlink" title="固定气动面动力学和陀螺力矩"></a>固定气动面动力学和陀螺力矩</h3><p>单涵道无人机内部设计固定气动面以平衡悬停状态下风扇反扭距的影响。</p><p>固定气动面对涵道轴得到力矩可近似为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109224911130.png"></p><p>如图所示：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109224921143.png"></p><p>在悬停点附近，涵道风扇转速几乎恒定，只有在剧烈的机动飞行中，转速变化才会比较明显了。为简单起见，假设风扇转速的变换可以忽略不计。因此，由风扇的旋转产生陀螺力矩可表示为：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230109225201109.png"></p><p>其中，Ib为风扇转动惯量，Lr为风扇角动量。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]基于自抗扰控制的涵道无人机控制分配_蒙超恒</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAV </tag>
            
            <tag> 建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手学ROS2</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E5%8A%A8%E6%89%8B%E5%AD%A6ROS2/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E5%8A%A8%E6%89%8B%E5%AD%A6ROS2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>原文作者链接：<a href="https://fishros.com/d2lros2/#/">https://fishros.com/d2lros2/#/</a></strong></p><h2 id="ROS介绍"><a href="#ROS介绍" class="headerlink" title="ROS介绍"></a>ROS介绍</h2><h3 id="ROS与ROS2对比"><a href="#ROS与ROS2对比" class="headerlink" title="ROS与ROS2对比"></a>ROS与ROS2对比</h3><h4 id="Ros的问题举例"><a href="#Ros的问题举例" class="headerlink" title="Ros的问题举例"></a>Ros的问题举例</h4><p>ROS的设计目标是简化机器人的开发，如何简化呢？ROS为此设计了一整套通信机制（话题、服务、参数、动作）。</p><p>通过这些通信机制，ROS实现了将机器人的各个组件给的连接起来，在设计这套通信机制的时候就设计了一个叫做<code>Ros Master</code>的东西，所有节点（可以理解为某一个组件，比如：激光雷达）的通信建立必须经过这个主节点。</p><p>这种组合结构图如下：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220918171101672.png"></p><p>主节点激光雷达节点避障检测节点底盘驱动节点</p><p>一旦<code>Ros Master</code>主节点挂掉后，就会<strong>造成整个系统通信的异常</strong>,此时避障策略将会失效，如果机器人正在运行，碰到障碍物会径直装上去，机毁人亡！</p><blockquote><p>ROS的不稳定这个问题在虽然对大家做机器人研究问题不大，但如果是想基于ROS做商业化机器人（比如无人驾驶汽车），就会造成非常严重的后果，小鱼在工作中可没为这个问题发愁</p></blockquote><p>除了不稳定这个问题，ROS还有很多其他地方存在着问题：</p><ul><li>通信基于TCP实现，实时性差、系统开销大</li><li>对Python3支持不友好，需要重新编译</li><li>消息机制不兼容</li><li>没有加密机制、安全性不高</li></ul><h4 id="ROS与ROS2架构对比"><a href="#ROS与ROS2架构对比" class="headerlink" title="ROS与ROS2架构对比"></a>ROS与ROS2架构对比</h4><p>所以在ROS2中，首当其冲的将ROS的主节点干掉了，这里放一张网上流传最广的ROS&#x2F;ROS2架构图。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220918171819801.png"></p><p><u><strong>OS层：</strong></u>从原来的只支持linux平台变成了支持windows、mac甚至是嵌入式RTOS平台，多平台！</p><p><u><strong>MiddleWare中间件层：</strong></u>那么中间层ROS2到底相对于ROS做了哪些优化呢？</p><ol><li><p>去中心化master，ROS和ROS2中间件不同之处在于，ROS2取消了master节点。</p><p>去中心化后，各个节点之间可以通过DDS的节点相互发现，各个节点都是平等的，且可以1对1、1对n、n对n进行互相通信。</p></li><li><p>不造通信的轮子，通信直接更换为DDS进行实现采用DDS通信，使得ROS2的实时性、可靠性和连续性上都有了增强。</p></li></ol><p><u><strong>应用层：</strong></u>对于应用层来说ROS2也做了很大的改进，上面那张图没有体现出来。</p><p>​ROS2进行改进有：</p><ol><li>python2到pyhton3的支持</li><li>编译系统的改进（catkin到ament）</li><li>C++标准更新到c++11</li><li>可以使用相同 API 的进程间和进程内通信</li></ol><p><strong><u>新概念举例：</u></strong></p><ul><li>可用Python编写的Launch文件</li><li>多机器人协同通信支持</li><li>支持安全加密通信</li><li>同一个进程支持多个节点、</li><li>支持Qos服务质量</li><li>支持节点生命周期管理</li><li>高效的进程间通信</li></ul><h3 id="ROS2初体验"><a href="#ROS2初体验" class="headerlink" title="ROS2初体验"></a>ROS2初体验</h3><h4 id="1-游戏1：你说我听"><a href="#1-游戏1：你说我听" class="headerlink" title="1.游戏1：你说我听"></a>1.游戏1：你说我听</h4><p>游戏内容：很简单，我们启动两个节点，一个节点负责发消息(说)，一个节点负责收消息（听）。</p><ol><li><p>启动一个终端Ctrl+Alt+T</p></li><li><p>启动倾听者</p><pre class="line-numbers language-none"><code class="language-none">ros2 run demo_nodes_py listenerCopy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动一个新终端Ctrl+Alt+T</p></li><li><p>启动说话者</p><pre class="line-numbers language-none"><code class="language-none">ros2 run demo_nodes_cpp talkerCopy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>观察一下现象，talker节点每数一个输，倾听节点每一次都能听到一个，是不是很神奇。</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220603124845382.png"></p><h4 id="2-游戏2-涂鸦乌龟"><a href="#2-游戏2-涂鸦乌龟" class="headerlink" title="2.游戏2:涂鸦乌龟"></a>2.游戏2:涂鸦乌龟</h4><p>游戏内容：启动海龟模拟器，启动海龟遥控器，控制海龟在地图上画出任意轨迹即可。</p><blockquote><p>本来是控制海龟画个五角星的，但经过手动多次尝试，发现太难了。大家有时间可以试试，有搞定的可以发个图在群里分享一下。</p></blockquote><p>2.1 启动海龟模拟器</p><p>打开终端Ctrl+Alt+T,输入下面的指令</p><pre class="line-numbers language-none"><code class="language-none">ros2 run turtlesim turtlesim_nodeCopy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以看到这样的界面</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20210720123734477.png"></p><p>2.2 启动海龟遥控器</p><p>点一下原来的终端输入Ctrl+Shift+T 打开一个新的标签页输入</p><pre class="line-numbers language-none"><code class="language-none">ros2 run turtlesim turtle_teleop_keyCopy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以看到这样子的界面</p><p><img src="https://fishros.com/d2lros2/humble/chapt1/get_started/4.ROS2%E5%88%9D%E4%BD%93%E9%AA%8C/imgs/image-20210720124022925.png"></p><p>这个时候你就可以使用上下左右去遥控海龟了，快试一试吧。</p><p><img src="https://fishros.com/d2lros2/humble/chapt1/get_started/4.ROS2%E5%88%9D%E4%BD%93%E9%AA%8C/imgs/image-20210720125026860.png"></p><h4 id="3-RQT可视化"><a href="#3-RQT可视化" class="headerlink" title="3. RQT可视化"></a>3. RQT可视化</h4><p>保持前面两个游戏在运行状态，打开终端，输入rqt。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rqtCopy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开之后的窗口如下图，空空如也，不要担心，因为我们没有选插件的原因。</p><p><img src="https://fishros.com/d2lros2/humble/chapt1/get_started/4.ROS2%E5%88%9D%E4%BD%93%E9%AA%8C/imgs/image-20220603124701935.png"></p><p>选择插件</p><p>这里我们可以选择现有的几个RQT插件来试一试，可以看到和话题、参数、服务、动作四大通信组件相关的工具都有，还有一些可视化、日志和系统计算图等相关的。</p><p><img src="https://fishros.com/d2lros2/humble/chapt1/get_started/4.ROS2%E5%88%9D%E4%BD%93%E9%AA%8C/imgs/image-20220603124722852.png"></p><p>Introspection &#x2F; Node Graph</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220603124722852.png"></p><p>打开后就可以看到上面几个节点之间的数据关系了，是不是很方便的工具。</p><p><img src="https://fishros.com/d2lros2/humble/chapt1/get_started/4.ROS2%E5%88%9D%E4%BD%93%E9%AA%8C/imgs/image-20220603125332498.png"></p><h3 id="ROS2系统架构"><a href="#ROS2系统架构" class="headerlink" title="ROS2系统架构"></a>ROS2系统架构</h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20220602204152352.png"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁力计与地磁场</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E7%A3%81%E5%8A%9B%E8%AE%A1&amp;%E5%9C%B0%E7%A3%81%E5%9C%BA/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E7%A3%81%E5%8A%9B%E8%AE%A1&amp;%E5%9C%B0%E7%A3%81%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h3 id="1、地球磁场分布图："><a href="#1、地球磁场分布图：" class="headerlink" title="1、地球磁场分布图："></a>1、地球磁场分布图：</h3><p> 地球磁场：地球的磁场象一个条形磁体一样由磁南极指向磁北极。在磁极点处磁场和当地的水平面垂直，在赤道磁场和当地的水平面平行，所以在北半球磁场方向倾斜指向地面。用来衡量磁感应强度大小的单位是Tesla或者Gauss（1Tesla&#x3D;10000Gauss）。随着地理位置的不同，通常地磁场的强度是0.4-0.6Gauss。需要注意的是，磁北极和地理上的北极并不重合，通常他们之间有11.5度左右的夹角。</p><p>单位：</p><p>1Tesla&#x3D;10000Gauss</p><p>1高斯 &#x3D;100000 nT</p><p>1高斯 &#x3D;1000 mGauss</p><p>1mGauss&#x3D;100nT<br><img src="https://img-blog.csdnimg.cn/2020042015072466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1d3VrdTEyMw==,size_16,color_FFFFFF,t_70"></p><h3 id="2、-地磁要素图："><a href="#2、-地磁要素图：" class="headerlink" title="2、 地磁要素图："></a><strong>2、 地磁要素图：</strong></h3><p>设观测点在O处，并以O点为原点建立地理坐标系OXYZ，X轴指向北，Y轴指向东，Z轴垂直指向地。</p><p><a href="https://img-blog.csdnimg.cn/20200420150740771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1d3VrdTEyMw==,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200420150740771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1d3VrdTEyMw==,size_16,color_FFFFFF,t_70"></a></p><p>   地磁场强度T在X轴上的投影Bn称为地磁场的北向分量；T在Y轴上的投影Be称为东向分量；T在Z轴上的投影Bz称为地磁场的垂向分量。T在水平面O-XY的投影Bh称为地磁场的水平分量。地磁水平分量Bh和垂向分量Bz所在平面称为磁子午面，磁子午面和地理子午面O-XZ平面的夹角称为磁偏角，用D表示，并规定其东偏为正，西偏为负。地磁场强度T与水平面O-XY的夹角称为磁倾角，用I表示。上述，T、Bh、Bn、Be、Bz、D、I统称为地磁场七要素，可作为定位定向的参考量。七要素只要知道三个独立的要素，就可以求其余的要素，常用的是磁倾角、磁偏角和水平分量。七要素间有如下关系：<br><a href="https://img-blog.csdnimg.cn/20200420152053240.png"><img src="https://img-blog.csdnimg.cn/20200420152053240.png"></a></p><p>3、中国地磁要素变化：<br>    中国的地磁要素大致分布情况：国境内地磁强度总量范围0.41~0.60Gauss(1 Gauss &#x3D; 10^-4T)；水平分量Bh由南至北从0.4降至0.21；垂直分量Bz由南至北从-0.1增至0.56；磁倾角I由南至北从-10°增至70°；磁偏角D由东向西从-11°增至5°，零偏线在中国中部偏西处，由北向南经过甘肃的安西以及西藏的得宋。</p><p>4、地磁场的一级近似：<br>对地磁场的一种近似，如下图所示：<br><a href="https://img-blog.csdnimg.cn/20200420153133439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1d3VrdTEyMw==,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200420153133439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1d3VrdTEyMw==,size_16,color_FFFFFF,t_70"></a></p><p>不考虑地磁轴与地球自转轴的偏离问题，地磁强度分量可用以下解析式来描述：</p><p><img src="https://img-blog.csdnimg.cn/2020042015332184.png"></p><p>其中，东向地磁分量为0；在实际运算中，将磁力计在水平面X、Y轴的测量值，全部投影到北向，并将东向置零。</p><h1 id="二、计算"><a href="#二、计算" class="headerlink" title="二、计算"></a>二、计算</h1><p>[<a href="https://zinghd.gitee.io/knowledge-point-1/">知识点]基于加速度计与磁力计的姿态解算方法(加计补偿偏航) | 曾同学的思考 (gitee.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁力计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四元数与欧拉角与旋转矩阵</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%8E%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a href="https://www.cnblogs.com/21207-iHome/p/6894128.html">四元数与欧拉角（RPY角）的相互转换 - XXX已失联 - 博客园 (cnblogs.com)</a></p><p>关于四元数旋转矩阵的推导：</p><p><a href="https://blog.csdn.net/u014265928/article/details/117170481">(66条消息) 【机器人学】绕空间任意轴的旋转矩阵推导_whu木小易的博客-CSDN博客_绕任意轴旋转的旋转矩阵</a></p><p>四元数与旋转矩阵的转换：</p><p><a href="https://blog.csdn.net/u014265928/article/details/117161701">(66条消息) 【机器人学】四元数与旋转矩阵的相互转换_whu木小易的博客-CSDN博客_四元数与旋转矩阵转换</a></p><p>结论：</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230111230403340.png" alt="旋转矩阵"></p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230107160428256.png" alt="四元数解欧拉角"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坐标变换 </tag>
            
            <tag> 四元数 </tag>
            
            <tag> 欧拉角 </tag>
            
            <tag> 旋转矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵的伪逆</title>
      <link href="/2023/01/11/Learn/%E6%9D%82/%E7%9F%A9%E9%98%B5%E7%9A%84%E4%BC%AA%E9%80%86/"/>
      <url>/2023/01/11/Learn/%E6%9D%82/%E7%9F%A9%E9%98%B5%E7%9A%84%E4%BC%AA%E9%80%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="满秩-x2F-列满秩-x2F-行满秩"><a href="#满秩-x2F-列满秩-x2F-行满秩" class="headerlink" title="满秩&#x2F;列满秩&#x2F;行满秩"></a>满秩&#x2F;列满秩&#x2F;行满秩</h2><p>设A是n阶矩阵, 若r（A） &#x3D; n, 则称A为满秩矩阵。但满秩不局限于n阶矩阵。</p><p>若矩阵秩等于行数，称为行满秩；若矩阵秩等于列数，称为列满秩。既是行满秩又是列满秩则为n阶矩阵即n阶方阵。行满秩矩阵就是行向量线性无关，列满秩矩阵就是列向量线性无关；所以如果是方阵,行满秩矩阵与列满秩矩阵是等价的。</p><h3 id="左逆与右逆"><a href="#左逆与右逆" class="headerlink" title="左逆与右逆"></a>左逆与右逆</h3><h4 id="左逆（Left-inverse）"><a href="#左逆（Left-inverse）" class="headerlink" title="左逆（Left inverse）"></a>左逆（Left inverse）</h4><p>　　如果<strong>A</strong>是一个m×n的列满秩矩阵，意味着<strong>A</strong>的各列线性无关，<strong>A</strong>的秩和列数相等，r &#x3D; n，但<strong>A</strong>可能存在更多的行，m ≥ n，此时<strong>A</strong>的零空间只有零向量，并且<strong>Ax</strong> &#x3D; <strong>b</strong>有唯一解（m &#x3D; n时）或无解（m &gt; n时）。</p><p>　　对于列满秩矩阵来说，对称矩阵<strong>ATA</strong>是一个n×n的满秩方阵，因此<strong>ATA</strong>可逆，此时：</p><p><img src="https://img2018.cnblogs.com/blog/1203675/201912/1203675-20191219212030618-546806398.png"></p><p>　　</p><p>　　我们称<strong>A</strong>-1left为<strong>A</strong>的左逆，是一个n×m的矩阵，左逆也是讨论最小二乘问题的核心。</p><h4 id="右逆（Right-inverse）"><a href="#右逆（Right-inverse）" class="headerlink" title="右逆（Right inverse）"></a>右逆（Right inverse）</h4><p>　　如果<strong>A</strong>是一个m×n的行满秩矩阵，意味着<strong>A</strong>的各行线性无关，<strong>A</strong>的秩和行数相等，r &#x3D; m，但<strong>A</strong>可能存在更多的列，m ≤ n。<strong>A</strong>的左零空间只有零向量，<strong>A</strong>的零空间是n - r维，因此有n – r个自由变量，当n &gt; m时，<strong>Ax</strong> &#x3D; <strong>b</strong>有无数解。</p><p>　　对于行满秩矩阵来说，对称矩阵<strong>AAT</strong>是一个m×m的满秩方阵，因此<strong>AAT</strong>可逆，此时：</p><p><img src="https://img2018.cnblogs.com/blog/1203675/201912/1203675-20191219212047065-958765262.png"></p><p>　　通常来说，右乘左逆得不到单位矩阵，仅在m &#x3D; n时才有<strong>AA</strong>-1left &#x3D; <strong>I</strong>。对于列满秩的m×n矩阵来说，<strong>AA</strong>-1left &#x3D; <strong>A</strong>(<strong>A</strong>T<strong>A</strong>)-1<strong>A</strong>T &#x3D; <strong>P</strong>，<strong>P</strong>是<strong>A</strong>的列空间的投影矩阵。同理，左乘右逆也得不到单位矩阵，<strong>A</strong>-1right<strong>A</strong>是<strong>A</strong>的行空间的投影矩阵。</p><p>From Wikipedia:</p><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230107165213444.png"></p><p>列满秩对应有左逆。行满秩对应右逆。</p><h3 id="Question-为何列满秩，Atranspose-A一定可逆？"><a href="#Question-为何列满秩，Atranspose-A一定可逆？" class="headerlink" title="Question:为何列满秩，Atranspose A一定可逆？"></a>Question:为何列满秩，Atranspose A一定可逆？</h3><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230107171325994.png"></p><h2 id="伪逆性质"><a href="#伪逆性质" class="headerlink" title="伪逆性质"></a>伪逆性质</h2><p><img src="https://img2018.cnblogs.com/blog/1203675/201912/1203675-20191219212655293-2111508311.png"></p><h2 id="伪逆与SVD"><a href="#伪逆与SVD" class="headerlink" title="伪逆与SVD"></a>伪逆与SVD</h2><p><img src="https://gitee.com/guozunrong123/pic-bed/raw/master/img/image-20230107175536979.png"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
            <tag> 伪逆 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
